FROM jenkins/jenkins:lts

USER root

# Install prerequisites
RUN apt-get update && \
    apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg \
    lsb-release \
    sudo \
    vim \
    iptables \
    procps

# Add Docker's official GPG key
RUN install -m 0755 -d /etc/apt/keyrings && \
    curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc && \
    chmod a+r /etc/apt/keyrings/docker.asc

# Add Docker repository to Apt sources
RUN echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
    $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
    tee /etc/apt/sources.list.d/docker.list > /dev/null

# Install Docker
RUN apt-get update && \
    apt-get install -y \
    docker-ce \
    docker-ce-cli \
    containerd.io \
    docker-buildx-plugin \
    docker-compose-plugin

# Configure Docker daemon
RUN mkdir -p /etc/docker && \
    echo '{\n  "storage-driver": "overlay2",\n  "log-driver": "json-file"\n}' > /etc/docker/daemon.json

# Set up Docker-in-Docker by exposing the Docker socket
VOLUME /var/lib/docker

# Add jenkins user to docker group
RUN usermod -aG docker jenkins

# Find the location of tini
RUN which tini || echo "tini not found"

# Create startup script - using the correct path for tini in the Jenkins image
RUN echo '#!/bin/bash\n\
# Start Docker daemon in background\n\
dockerd &\n\
\n\
# Wait for Docker to start\n\
echo "Waiting for Docker to start..."\n\
until docker info >/dev/null 2>&1; do\n\
  sleep 1\n\
done\n\
echo "Docker started successfully"\n\
\n\
# Start Jenkins (using the correct path for Jenkins init)\n\
exec su jenkins -c "/usr/local/bin/jenkins.sh"\n\
' > /usr/local/bin/start-jenkins-with-docker.sh && \
    chmod +x /usr/local/bin/start-jenkins-with-docker.sh

ENTRYPOINT ["/usr/local/bin/start-jenkins-with-docker.sh"]
